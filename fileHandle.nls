<<<<<<< HEAD
;; this reads text files to lists
to read-params-from-file [fname]
  carefully [ ;; in case of file read errors
    file-open fname
    ;; make list of variable names from the first comma-separated line
    let varnames split-string-to-list file-read-line ","
    print varnames
    while [not file-at-end?] 
    [
      ;; make a list of values from the next comma-separated line in the file
      let values split-string-to-list file-read-line ","
        
      ;; make the var-value pairs into a list of set commands
      let var-value-set-commands (map [[var val] -> (word "set " var " " val)] varnames values)
        
      foreach but-first var-value-set-commands 
      [ ;; run the set commands
        [cmd] -> run cmd ; show cmd
      ]
    ]
    file-close
  ]
  [
    show (word "Error reading file " fname)
    file-close
  ]

end

to read-params-list-from-file [fname]
  carefully [ ;; in case of file read errors
    file-open fname
    ;; make list of variable names from the first comma-separated line
    let varnames split-string-to-list file-read-line ","
    print varnames
    while [not file-at-end?] [
      ;;create-turtles 1 [
        ;; make a list of values from the next comma-separated line in the file
        let values split-string-to-list file-read-line ","
        ;;show values
        ;; make the var-value pairs into a list of set commands
      let var-value-set-commands (map [ [var val] -> (word "set " var " lput " val " " var)] varnames values)
        ;;show var-value-set-commands
        
        foreach but-first var-value-set-commands [ ;; run the set commands
          ;;show ?
          cmd -> run cmd ; show cmd
        ]

      ;;]
    ]
    file-close
  ]
  [
    show (word "Error reading file " fname)
    file-close
  ]

end

;; splits a string s at the splitter separator (usually ",")
;; and reports a list of strings
to-report split-string-to-list [s splitter]
  let lst []
  let idx 0
  while [s != ""] [
    let srch position splitter s
    ifelse is-boolean? srch [
      set lst lput s lst
      set s ""
    ]
    [
      set lst lput (substring s idx srch) lst
      set s substring s (srch + 1) (length s)
    ]
  ]
  report lst
end


to start-movie
  ;; prompt user for movie location
  ; user-message "First, save your new movie file (choose a name ending with .mp4)"
  let path "out.mp4"
  if not is-string? path [ stop ]  ;; stop if user canceled

  vid:start-recorder ;; path

end

to close-movie
  vid:save-recording "out.mp4"

end



to write-pattern
  carefully
  [
    file-open "pattern.txt"

    file-print "run x y species"

    ask patches
    [
      let X (word behaviorspace-run-number " " pxcor " " pycor " " species)
      file-print X
      ;;file-write behaviorspace-run-number file-write pxcor file-write pycor file-write species file-print ""
    ]
    file-close
  ]
  [
    show "File writing failed"
  ]
=======
;; this reads text files to lists
to read-params-from-file [fname]
  carefully [ ;; in case of file read errors
    file-open fname
    ;; make list of variable names from the first comma-separated line
    let varnames split-string-to-list file-read-line ","
    print varnames
    while [not file-at-end?] 
    [
      ;; make a list of values from the next comma-separated line in the file
      let values split-string-to-list file-read-line ","
        
      ;; make the var-value pairs into a list of set commands
      let var-value-set-commands (map [[var val] -> (word "set " var " " val)] varnames values)
        
      foreach but-first var-value-set-commands 
      [ ;; run the set commands
        [cmd] -> run cmd ; show cmd
      ]
    ]
    file-close
  ]
  [
    show (word "Error reading file " fname)
    file-close
  ]

end

to read-params-list-from-file [fname]
  carefully [ ;; in case of file read errors
    file-open fname
    ;; make list of variable names from the first comma-separated line
    let varnames split-string-to-list file-read-line ","
    print varnames
    while [not file-at-end?] [
      ;;create-turtles 1 [
        ;; make a list of values from the next comma-separated line in the file
        let values split-string-to-list file-read-line ","
        ;;show values
        ;; make the var-value pairs into a list of set commands
      let var-value-set-commands (map [ [var val] -> (word "set " var " lput " val " " var)] varnames values)
        ;;show var-value-set-commands
        
        foreach but-first var-value-set-commands [ ;; run the set commands
          ;;show ?
          cmd -> run cmd ; show cmd
        ]

      ;;]
    ]
    file-close
  ]
  [
    show (word "Error reading file " fname)
    file-close
  ]

end

;; splits a string s at the splitter separator (usually ",")
;; and reports a list of strings
to-report split-string-to-list [s splitter]
  let lst []
  let idx 0
  while [s != ""] [
    let srch position splitter s
    ifelse is-boolean? srch [
      set lst lput s lst
      set s ""
    ]
    [
      set lst lput (substring s idx srch) lst
      set s substring s (srch + 1) (length s)
    ]
  ]
  report lst
end


to start-movie
  ;; prompt user for movie location
  ; user-message "First, save your new movie file (choose a name ending with .mp4)"
  let path "out.mp4"
  if not is-string? path [ stop ]  ;; stop if user canceled

  vid:start-recorder ;; path

end

to close-movie
  vid:save-recording "out.mp4"

end

;; Export entire world and history, etc. - this generates large files
to write-world
  carefully
  [
    let file-name (word "world_" behaviorspace-run-number "_at_" ticks ".csv")
    export-world file-name
  ]
  [
    show "World writing failed"
  ]
end

;; Export grid composition *only* - no structural information
to write-pattern
  carefully
  [
    file-open "pattern.txt"

    file-print "run x y species"

    ask patches
    [
      let X (word behaviorspace-run-number " " pxcor " " pycor " " species)
      file-print X
    ]
    file-close
  ]
  [
    show "File writing failed"
  ]
>>>>>>> cff2c375849df9e46c53ec042312a7729ffe129f
end