
to setup
  
  clear-all
  let dim (sqrt (world-area * 1e4)) / patch-grain ;;dim is the number of cells across each axis (i.e. world-size = dim x dim)
  resize-world 0 dim 0 dim
  set-patch-size floor 5 * (100 / dim) ;;set display size of the world
  
  set max-shade-dist 32      ;; distance over which trees can influence each other at most (see build-shells and get light-env) (WHY 32 HARD CODED??????)
  set abundances n-values n-species [0] ; [0 0 0 0 0 0 0]
  set dbh-by-species n-values n-species [0] ; [0 0 0 0 0 0 0]
  set age-by-species n-values n-species [0] ; [0 0 0 0 0 0 0]
  set hgt-by-species n-values n-species [0] ;  [0 0 0 0 0 0 0]
  set mean-age-by-species n-values n-species [0] ; [0 0 0 0 0 0 0]
  set mean-hgt-by-species n-values n-species [0] ; [0 0 0 0 0 0 0]
  set BA-by-species n-values n-species [0] ; [0 0 0 0 0 0 0] ;; Doesn't n-species have to be eight to match input files and data

  set spp-list (range 1 (n-species + 1)) ;;Note this creates a list from 1 to and including n-species (range stops at one before the max value set)
  set patch-grain 4 ;; Why do we reset the patch grain each run and why 4??

  set niche-breadth 0.3 ;; Where did this value come from and why is it not set in interface

  set wgt-list []
  get-dnorm-lookup

  set colour-list []
  set max-hgt []
  set max-dbh []
  set max-age []
  set growth-form []
  set g-jabowa []
  set b2-jabowa []
  set b3-jabowa []

  set regen-height []

  set shade-tolerance []

  set repro-height []
  set repro-age []
  set seed-prod []
  set ldd-dispersal-dist []
  set ldd-dispersal-frac []
  set gap-maker [] ;; Binary as to whether species is a, possible?, gap-maker i.e. can make a forest gap when it dies
  set supp-tolerance []
  set supp-mortality []
  set herbivory []
  set edge-response []
  set seedling-inhibition []

  set start-dbh []
  set start-dbh-sd []
  set start-abund []
  set max-init-hgt []

  set seedlings-init []
  set saplings-init []


  set seedling-survival []
  set sapling-survival []
  set seedling-transition []
  set external-species []

  set saplings-to-plant (list 1 0 1 0 0 1 0 0) ;; Where does this list come frome?


  set a-tf-hgt 0.05289 ;; WHERE DO THESE VALUES COME FROM
  set b-tf-hgt -0.05695

  set demography-files []
  build-species-demography

 ;;seedlings-saplings

  ask patches ;;What is this doing. Assigns 10/2 or 6/1 to a list in each patch depending on the growth form list?? Is this the abundance?? If so why not random??
  [
    set seedlings map [i -> ifelse-value (i = 1) [10] [6] ] growth-form
    set saplings map [i -> ifelse-value (i = 1) [2] [1] ] growth-form
  ]

  set seedling-mortality (map [ [sdl sap] -> (1 - sdl - sap)] seedling-survival seedling-transition)
  set sapling-mortality (map [ [s] -> (1 - s)] sapling-survival)
  
  ;; What are edge-b0 and b1
  set edge-b0 0
  set edge-b1 1

  ask patches
  [
      init-patch
      new-trees
  ]

  ask patches
    [set nhb-height get-nhb-height]

  if turtle-trees? = false
    [ ask patches [colour-patch]  ]
  
  if ground-weeds? [init-trad]
  
  ;; set tick 1
  set world-size-patches world-width * world-height
  update-abundances
  
  reset-ticks

end


to init-patch

  build-sets     ;; build annuli patch-sets for shading computation

  ; set age int random-exponential 50
  set species rnd-roulette spp-list start-abund

  ;; set dbh random-float (item (species - 1) max-dbh ) * 0.5 ;; 0.01
  ifelse (item (species - 1) growth-form = 1) ;;sets the height and age depending on growth form either tree (dbh) or tree fern (hgt)
  [
    let max-hgt-frac item (species - 1) max-init-hgt
    if max-hgt-frac < 0 or max-hgt-frac > 1 [set max-hgt-frac 0.95]

    set dbh min (list random-lognormal (item (species - 1) start-dbh) (item (species - 1) start-dbh-sd) (item (species - 1) max-dbh * max-hgt-frac))
    if dbh < 0.01 [set dbh 0.01]
    set height 1.37  + ((item (species - 1) b2-jabowa) * dbh) - ((item (species - 1) b3-jabowa) * dbh * dbh)
    set age get-age-from-dbh
  ]


  [
    let max-hgt-frac item (species - 1) max-init-hgt
    if max-hgt-frac < 0 or max-hgt-frac > 1 [set max-hgt-frac 0.95]

    set height min (list random-normal (item (species - 1) start-dbh) (item (species - 1) start-dbh-sd) (item (species - 1) max-hgt * max-hgt-frac))
    if height < 0 [set height 1.5]
    set dbh 0.1
    set age get-age-from-hgt
  ]

  set previous-growth []

  ;show dbh show height

  set expand? false
  set nhbs count item 0 nhb-set
  let d max ldd-dispersal-dist

  set edge-weight edge-effect get-edge-distance
end

to init-trad
  
  let n-init round (trad-init-cover * count patches)
  
  
  if trad-init-scenario = "random"
  [
    ask n-of n-init patches [
      set trad-cover random-float 0.5
      set trad-inv 0
    ]
  ]  
  
  if trad-init-scenario = "edges"
  [
    let the-edges patches with [pxcor = 0 or pycor = 0 or pxcor = (world-width - 1) or pycor = (world-height - 1)]
    
    ask n-of (min list n-init count the-edges) the-edges [
      set trad-cover random-float 0.5
      set trad-inv 0
    ]
  ]  
  
  if trad-init-scenario = "clustered"
  [
    let seeded 0
    let trad-patches no-patches
    while [count trad-patches < n-init] [
      show count trad-patches
      ifelse random-float 1 < 0.1 or trad-patches = no-patches
      [ 
        ask one-of patches with [trad-cover = 0] 
        [
          set trad-cover 0 
          set trad-inv 0
          set trad-patches (patch-set trad-patches self)
        ]
      ]  
      [
        ask one-of [neighbors with [trad-cover = 0]] of trad-patches
        [
          set trad-cover random-float 0.5
          set trad-inv 0
          set trad-patches (patch-set trad-patches self)
        ]
      ] 
    ] 
  ]
  
end



;; This builds the species demography -?> may ultimately want to read from file
to build-species-demography
   ;; order of species: tawa, pigeon, pukatea, kawakawa, mahoe, rimu, tree-fern

   read-params-list-from-file demography-file
   read-params-list-from-file site-file

  get-jabowa-coeffs
end

